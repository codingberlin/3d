#version 400 core

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float normalizedHeight;

out vec4 out_Color;

uniform sampler2D grassTexture;
uniform sampler2D snowTexture;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;

void main(void){

    vec2 tiledCoords = pass_textureCoordinates * 40;
    float grassTextureAmount = 1;//normalizedHeight;
    float snowTextureAmount = 0;//1 - normalizedHeight;
    vec4 grassTextureColor = texture(grassTexture, tiledCoords);// * grassTextureAmount;
    vec4 snowTextureColor = texture(snowTexture, tiledCoords) * snowTextureAmount;
    vec4 totalTextureColor = grassTextureColor + snowTextureColor;

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDotl = dot(unitNormal,unitLightVector);
	float brightness = max(nDotl,0.2);
	vec3 diffuse = brightness * lightColour;
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	
	float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor,shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColour;
	

	out_Color =  vec4(diffuse,1.0) * grassTextureColor + vec4(finalSpecular,1.0);

}